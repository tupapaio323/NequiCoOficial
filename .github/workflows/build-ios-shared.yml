name: iOS Shared XCFramework

on:
  workflow_dispatch:
  push:
    branches: [ "master", "main" ]

jobs:
  build-shared-xcframework:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Build shared.xcframework (Debug)
        run: ./gradlew :shared:clean :shared:assembleDebugXCFramework

      - name: Upload XCFramework artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-xcframework
          path: shared/build/XCFrameworks/**/*

  build-ipa-if-iosapp-exists:
    runs-on: macos-latest
    needs: build-shared-xcframework
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect iOS project
        id: detect
        shell: bash
        run: |
          set +e
          HAS_XCODEPROJ=false
          if ls iosApp/*.xcodeproj >/dev/null 2>&1 || ls iosApp/*.xcworkspace >/dev/null 2>&1 || [ -f iosApp/project.yml ]; then
            HAS_XCODEPROJ=true
          fi
          echo "has_iosapp=${HAS_XCODEPROJ}" >> "$GITHUB_OUTPUT"
      - name: Install XcodeGen if needed
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        run: |
          brew install xcodegen || true
          cd iosApp
          mkdir -p Frameworks
          # Download XCFramework artifact from previous job
          cd ..
      - name: Download XCFramework artifact
        uses: actions/download-artifact@v4
        with:
          name: shared-xcframework
          path: shared-artifacts
      - name: Place XCFramework into iosApp
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        run: |
          mkdir -p iosApp/Frameworks
          # Prefer Debug build
          SRC=$(ls -d shared-artifacts/XCFrameworks/Debug/shared.xcframework || true)
          if [ -z "$SRC" ]; then SRC=$(ls -d shared-artifacts/XCFrameworks/Release/shared.xcframework); fi
          cp -R "$SRC" iosApp/Frameworks/
      - name: Generate Xcode project with XcodeGen
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        run: |
          cd iosApp
          if [ -f project.yml ]; then xcodegen generate; fi

      - name: Select Xcode
        run: |
          sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"
          xcodebuild -version

      - name: Resolve Swift packages
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        run: |
          cd iosApp
          if ls *.xcodeproj >/dev/null 2>&1; then xcodebuild -resolvePackageDependencies -project *.xcodeproj; fi

      - name: Archive iOS app (unsigned)
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        run: |
          set -e
          cd iosApp
          SCHEME_NAME=$(xcodebuild -list -project *.xcodeproj | awk -F":" '/Schemes:/,/Targets:/' | tail -n +2 | head -n 1 | xargs || echo "App")
          xcodebuild -project *.xcodeproj -scheme "$SCHEME_NAME" -configuration Release -sdk iphoneos -archivePath build/app.xcarchive archive CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=""

      - name: Export .ipa (unsigned)
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        run: |
          cd iosApp
          mkdir -p build/Payload
          cp -R build/app.xcarchive/Products/Applications/*.app build/Payload/
          cd build
          /usr/bin/zip -r app-unsigned.ipa Payload

      - name: Upload iOS artifacts
        if: ${{ steps.detect.outputs.has_iosapp == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: iosApp-unsigned
          path: |
            iosApp/build/app.xcarchive
            iosApp/build/app-unsigned.ipa


